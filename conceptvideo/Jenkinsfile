import groovy.json.JsonSlurper

def AWS_DEFAULT_REGION = "ap-northeast-2"
def S3_KEY_PREFIX = ""
def PROFILE = ""
def S3_BUCKET = ""
def S3_FILE_NAME = ""
def DEPLOY_GROUP_NAME = ""
def DEPLOYMENT_ID = ""
def SYSTEM_SUFFIX = ""
def HELATH_TIMEOUT = ""

@NonCPS
def toJson(String text) {
    def parser = new JsonSlurper()
    return parser.parseText( text )
}

def initEnvironments(String buildBranch) {
    if(buildBranch == "production") {
        env.PROFILE = "prd"
        env.S3_KEY_PREFIX = "mpd"
        env.S3_BUCKET = "wjtb-prd-deploy"
        env.DEPLOY_GROUP_NAME = "prd-mpd-deploy-group"
        env.PACKAGE_NAME = "prd-mpd-relay-model"
        env.HELATH_TIMEOUT = 120
    } else if(buildBranch == "development") {
        env.PROFILE = "dev"
        env.S3_KEY_PREFIX = "mpd"
        env.S3_BUCKET = "wjtb-dev-deploy"
        env.DEPLOY_GROUP_NAME = "dev-mpd-deploy-group"
        env.PACKAGE_NAME = "dev-mpd-relay-model"
        env.HELATH_TIMEOUT = 3
    } else if(buildBranch == "master") {
        env.PROFILE = "prd"
        env.S3_KEY_PREFIX = "brs"
        env.S3_BUCKET = "wjtb-prd-deploy"
        env.DEPLOY_GROUP_NAME = "prd-brs-deploy-group"
        env.PACKAGE_NAME = "prd-brs-relay-model"
        env.HELATH_TIMEOUT = 120
    } else if(buildBranch == "develop") {
        env.PROFILE = "dev"
        env.S3_KEY_PREFIX = "brs"
        env.S3_BUCKET = "wjtb-dev-deploy"
        env.DEPLOY_GROUP_NAME = "dev-brs-deploy-group"
        env.PACKAGE_NAME = "dev-brs-relay-model"
        env.HELATH_TIMEOUT = 3
    }
}

pipeline {
    agent any

    stages {
        stage('Prepare') {
            steps {
                script {
                    initEnvironments("${GIT_BRANCH}")
                    echo "GIT_BRANCH: ${GIT_BRANCH}"
                    echo "PROFILE: ${env.PROFILE.toUpperCase()}"
                    echo "S3_BUCKET: ${env.S3_BUCKET}"
                    echo "DEPLOY_GROUP_NAME: ${env.DEPLOY_GROUP_NAME}"
                    echo "PACKAGE NAME: ${env.PACKAGE_NAME}"
                    sh "ls -al"
                }
            }
        }

        stage('Build') {
            steps {
                sh "npm install"
            }
        }

        stage ('Upload-Bundle') {
            steps {
                echo "----- [Uploading Bundle '${env.PACKAGE_NAME}.tar' to '${env.S3_BUCKET}/${env.S3_KEY_PREFIX}/${env.PACKAGE_NAME}/${env.PACKAGE_NAME}.tar'] -----"
                sh """
				ls -al
                rm -rf ./.git
                rm -rf ./.gitignore
                rm -rf ./.idea
                rm -rf ./.vscode
				rm -rf ./deploy.sh
				cp ./deploy_${env.PROFILE}.sh ./deploy.sh
                tar cf ${env.PACKAGE_NAME}.tar *
                ls -al
                aws s3 cp ./${env.PACKAGE_NAME}.tar s3://${env.S3_BUCKET}/${env.S3_KEY_PREFIX}/${env.PACKAGE_NAME}/${env.PACKAGE_NAME}.tar --profile ${env.PROFILE.toUpperCase()}
                """
            }
        }

        stage ('Deploy') {
            steps {
                script {
                    echo "----- [CodeDeploy Application: ${env.PACKAGE_NAME}] -----"
                    sh """
                    aws deploy create-deployment \
                    --application-name "${env.PACKAGE_NAME}" \
                    --s3-location bucket="${env.S3_BUCKET}",key=${env.S3_KEY_PREFIX}/${env.PACKAGE_NAME}/${env.PACKAGE_NAME}.tar,bundleType=tar \
                    --deployment-group-name "${env.DEPLOY_GROUP_NAME}" \
                    --description "create ${env.PACKAGE_NAME}" \
                    --region "${AWS_DEFAULT_REGION}" \
                    --profile ${env.PROFILE.toUpperCase()} \
                    --output json > DEPLOYMENT_ID.json
                    """
                    def textValue = readFile("DEPLOYMENT_ID.json")
                    def jsonDI =toJson(textValue)
                    env.DEPLOYMENT_ID = "${jsonDI.deploymentId}"
                }
            }
        }

        stage ('Health-Check') {
            steps {
                echo "----- [Health-Check] DEPLOYMENT_ID ${env.DEPLOYMENT_ID} -----"
                echo "----- [Health-Check] Waiting codedeploy processing -----"
                timeout(time: "${env.HELATH_TIMEOUT}", unit: 'MINUTES'){
                    sh """
                    aws deploy wait deployment-successful --deployment-id ${env.DEPLOYMENT_ID} --profile ${env.PROFILE.toUpperCase()}
                    """
                }
            }
        }
    }
}